Pon en esta carpeta el código de filosofos.c, maestro.c y si has usado algún otro código .c auxiliar
junto con el Makefile que compila todo.

Recuerda añadir comentarios // FASE X a las líneas que hayas modificado, como se explica en el
enunciado del entregable.

Añade a este LEEME.txt la explicación de cómo has resuelto la Fase 4, si la has hecho. Puedes añadir
también cualquier comentario que consideres relevante.

// Solucion de la fase 4.

No se produce nunca una condicion de carrera que de lugar al deadlock de los procesos. Con solucionar bien la fase 3
se resuelve automaticamente la fase 4.

Lo que cambia mi código respecto al original es que aparte de recibir dos números en lugar de uno, utilizo la función
sscanf() para obtener tres valores (el ptr para la letra L/U, el char *palillo1 y el char *palillo2) que me indican
la accion a realizar y los mutex sobre los que hacerlo.

Luego es cuestión de crear dos variables "poslista" en lugar de uno y asignar
    poslista_1 = atoi(palillo1);
    poslista_2 = atoi(palillo2);

Se comprueba que ambos valores estan en rangos validos y se bloquean ambos mutex a la vez.
Para desbloquear los mutex, la filosofia es la misma pero con pthread_mutex_unlock().

Yo resolví el problema de la fase 3 así y no causa starvation, por más que intento generar los filosofos 
de forma simultánea.

## ¿Por que funciona esta solucion?

    En el peor caso si el filósofo 0 y el cuatro se sientan a la vez, 
    el f0 reservaría los palillos 0 y 1, y el f4 los palillos 4 y 0.

    Es decir, suponiendo que lleguen a la vez, el primer mutex del f0 sería para el palillo 0 
    y el primero del f4 para el 4. 

    El segundo mutex del f0 reserva el palillo 1 y el f4 haría la reserva del 0, 
    que no está disponible porque el filosofo 0 ya llegó, y lo reservó, por lo que tiene que esperar a que termine el filósofo 0

    En teoria, si todos los filósofos llegasen simultaneamente a la mesa, se daría un deadlock, sin embargo, en este caso esto es
    completamente imposible que suceda por dos razones:

        -   La primera es la propia construccion del programa. Es el maestro el que genera los hilos a petición del filósofo
        que se conecta y, como las peticiones siempre llegan a través de un socket, no se pueden conectar varios filósofos simultáneamente,
        sino que se atienden peticiones en un orden, mientras se encolan aquellas que no se pueden atender. 
        Por ello, es imposible que se produzca una condicion de carrera.

        -   La segunda es que, incluso suponiendo que el maestro pudiera atender a varias peticiones a la vez, por cómo C gestiona 
        la creación de hilos, siempre hay un primero y un ultimo, por lo que siempre habrá un hilo que entre antes a la ejecicución
        del pthread_mutex_lock, es decir, siempre habra un filosofo que se "siente" a destiempo de otro y que tenga dos palillos
        disponibles para comer, evitando cualquier tipo de condicion de carrera.